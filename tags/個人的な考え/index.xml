<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>個人的な考え on 3panda</title>
    <link>https://3panda.github.io/tags/%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AA%E8%80%83%E3%81%88/</link>
    <description>Recent content in 個人的な考え on 3panda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 08 Apr 2019 06:21:15 +0900</lastBuildDate>
    
	<atom:link href="https://3panda.github.io/tags/%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AA%E8%80%83%E3%81%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ものがたりに求めないもの</title>
      <link>https://3panda.github.io/posts/20190408/</link>
      <pubDate>Mon, 08 Apr 2019 06:21:15 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20190408/</guid>
      <description>ものがたり
映画だったり小説だったりで個人的に求めるモノはハッピーエンド
誰かが死ぬ悲しい話はちょっと辛い
例外として実話に基づく事で
ある人の死についての話ではなく
その人の生き方や考えの話であるなら良いと思う
ただ、簡単に病気になって死んでしまうヒロインの話が多すぎる
実際に存在する病気でそれを広める
理解を世間にしてもらう
そんな理由なら意味はある
けれど単純に涙を誘うためになら
「それはどうなんだろ？」
って思ってしまう
個人的な話なので存在を否定するとかではなく
好まないって話
極端な話で言えば、不治の病に犯された主人公が
最後に現実ではありえない
奇跡とかで完治したり
死んだのに生き返ったり
なんかそんなので良い
フィクションなんだから
と思ってしまう。
なんだか悲しい話がまた流行しているのか
そんなものがたりをよく目にするので記事にしてみました。
あくまで個人的な意見を垂れ流しで書いただけですので
そんなモノとして読み流してください。
それでは</description>
    </item>
    
    <item>
      <title>プログラミングを勉強すること != プログラマになること</title>
      <link>https://3panda.github.io/posts/20190312/</link>
      <pubDate>Tue, 12 Mar 2019 06:29:01 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20190312/</guid>
      <description>「多種多様な仕事でTHECが沢山必要になる」
だから
「みんなプログラミングを勉強しよう！」
個人的にこの流れは良いと思う
プログラミングを小学校で「算数」を習うみたいに勉強する。 うまく伝わるか分からないけど「数学」でなく「算数」のノリ。 歌いながら九九を勉強するような感じで
これは
プログラマをただ増やそうでもないし
理系プログラマを増やそうって事でもないし
文系プログラマがダメだと言う話でもない
理数系も文系もこの先はもっとプログラミングが必要になり 当たり前になる。 って話だと思う。
まとめると世の中みんなプログラマになろうって話ではないし ならないといけないって話ではない
最近よく聞く金融関連のFinTechや会社の管理業などのHRTech、 この先は法務関連だったりもっとプログラミングとこれまでは程遠いとされていた分野でプログラミングが必要になる
もちろん専門でプログラミングをするプログラマも無くなりはしないけど 今ある、そしてこれから登場するあらゆる職業でプログラミングが何らか関わると言う意味。
最初に書いたみたいに数学ではなく算数のようにプログラミングを取得するような流れで学校教育に組み込まれるのは良いと思うし、必然なのだと思う。
くどいですが多種多様な職種でプログラミングが必要になるって事だと個人的には考え得ます。
「プログラミングを勉強すること==プログラマにならないと行けない」
そんな誤った風潮に今なりそうな空気を日々感じています。
あくまで個人的な考えですが、そうならないと良いなと思い記事にしました。
それでは</description>
    </item>
    
    <item>
      <title>曖昧さの必要性</title>
      <link>https://3panda.github.io/posts/20190307/</link>
      <pubDate>Thu, 07 Mar 2019 07:02:59 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20190307/</guid>
      <description>人間が人間である最大の特徴は何だろう
私は曖昧さであると思います。
※以下は全てあくまで個人的な考えですので妄想とでも思って読んでくださいませ。
計算機は正確な答えを計算出来る
人は計算機には正確さでは到底勝てない
でも逆に計算機に曖昧な値を出力させることは難しい
計算機はそもそも曖昧さを良しとしない
正確性を求めるものだから
極論を言うと
1 + 1 を計算したくて計算機に計算させて
「多分 2」 と答えが出たら正直困る
人が計算機に求めるものは
1 + 1 = 2
基本的な概念はそのはずである
故に曖昧さを弾き出す概念は難しい
最近はその曖昧さを弾き出している
正しくは曖昧なものを分析し数値と言う形で表現している
やはり人のそれとは違っているのだろう
人間以外の動物も曖昧さを持っている
でも人間ほど複雑には出来ていない
複雑な仕組みで存在している人間を計算機では現在のところ全てを分析出来ていない
分析できる日も訪れるのかもしれない
でもそんな日は来ないかもしれない
人間は計算機よりも曖昧で時に面倒である
計算機のような正確性を欲しいとおもう時もある
でも曖昧さがあるから人間は人間であり
曖昧な存在であるからそれぞれに違いがある
その曖昧さから生まれた違いが人の個性であって
個々の存在意義なんだと思う
だから曖昧さは人には必要なのかもしれない
それでは</description>
    </item>
    
    <item>
      <title>大人になった私とWeb</title>
      <link>https://3panda.github.io/posts/20181226/</link>
      <pubDate>Wed, 26 Dec 2018 06:31:44 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20181226/</guid>
      <description>本日は長谷川恭久 さんのBLOGの記事オトナがwebを殺さないために を読んでの個人的な考えを書いてみました。
Web屋から少し距離を置いている（言いながら今年は割と仕事したかも）ので客観的に考えてみる
Webは良いも悪いも一つのメディアとして&amp;hellip;長谷川さんの言葉をお借りするならば大人になり、大人の対応を求められるようになったのかも知れない。
一つのメディアとして認知された事によって、色々と制約も増えある意味で自由は効かないのかも知れない。 ただそれはWeb以前のメディアである、映画、TV、ラジオなどの歩んで来たものと同じで、その制約の中で 新しい事を行なっていくのが、これからのWebの専門家に求められるのでは無いのかと考えます。
ちなみに「分からない」の例にあったTikTokや他にも流行っているSnowもInstagramも私はやっていないので正直詳しくはありません。
若い方がやっているのを見かけるくらいです。
でも
すごい！
面白そう！
とは個人的には思っていて、そこからの新しい発見は発信がある事は良い事だと思います。
そしてこれらは新しい文化なのだと思います。
残念な事に新しい文化が生まれると必ず否定的な考えが生まれることがあります。
あれは危険だ
あれは教育に良く無い
あれは無駄だ
あれは無意味だ
&amp;hellip;.
その否定的な事も全てが間違いでは無いのかも知れません。
これまでに起こり得なかった問題や課題を生み出すと言う点においては間違いなく。
ただこれはWebやそれ以前も同じ事があったと思います。
Webにおいても同じような事が懸念され、Webを生業にして来た世代は色々と対策をとりやって来ました。 そして新しい文化においても同じにようする必要があり、そしてやっていくのだと思います。
そんな世の中の進歩の中で、「分からない」を言い訳にせずに、新しい文化を受け入れて
これまでに経験を生かし、その発展をより良いものに進める後押しをすることが、 少し大人になった我々世代に役割なのかも知れません。
少々荒削りな文章になりますが、感じた事を書いてみました。
それでは</description>
    </item>
    
    <item>
      <title>すこしだけ昔の自分の考えを振り返る</title>
      <link>https://3panda.github.io/posts/20181116/</link>
      <pubDate>Fri, 16 Nov 2018 07:14:34 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20181116/</guid>
      <description>2011年
 ProcessingとArduinoをなんとかHTML5(というかHTMLの未来)に繋げる何かに昇華したい。 HTMLを情報として扱う形にして、ブラウザではないものからのアプローチが・・・・ry) そんな感じ
 なんだかこれはIotなんじゃ無いのかと思う。 着眼点は良かったんだけど、行動に移せずに頓挫してしまったなぁ&amp;hellip;.
でも、Processingに出会えたのは良かった。
ビジュアル表現をプログラミン出来るからプログラミン初心者さんにはすごくお勧めです。
2012年
 Web技術の歴史を追っているとWeb2.0って懐かしい言葉が目に止まりました。
Webの歴史においてこれもまた一つのバズワードでしか無いのだけど提唱されている考えは悪いものではありませんでした。
  Web2.0をすごく噛み砕いて誤解を恐れずに説明すると
発信者→利用者
の【一歩通行の流れ】が
発信者←→利用者
な【双方向の流れ】に変わった事だと再認識しました。
つまりそれ以前の一歩通行の仕組みがWeb1.0(なのか1.5なのか？？)
じゃ今の&amp;quot;広義の意味のHTML5&amp;quot;とかはWeb3.0なんじゃないのかな？
←発信者←→SNS←→利用者\\\\\ry)
もうテキストでは説明出来ないWebのネットワークを振る活用した
時代の入り口。
なんてだれか発言力のある人がバズワードとしてのWeb3.0を・・・
ないな（＾＾；
 HTML5がWeb3.0って言えるかどうかは、今の自分ではなんとも言えない。
書いてて思ったのはスマートフォンの登場がある意味Webでも画期的でそこがWeb3.0 と言えば3.0だったのかもしれない。
モバイルファーストかとかそんな言葉がある意味Web3.0に変わる言葉だと考えると良いのかもしれない。
もしくはWeb3.0の中の代表的な一つなのかも。
HTML5は実のところ、言われていた程は見える部分は目立った話では無くて、技術者にとって良い事が増えたことが大きかったのだと思う。
その後のAIブームとかの流れで、もう誰もHTML5って話題を上げてこないけど、 その頃イメージされていたものが、現在ようやく現実的なレベルになっていると実感がある。
あらゆる技術は、もしかしたら世の中で騒がれなくなった時が、一定の成果が出る時なのかもしれないと感じました。
今回は過去の自分のSNSの発言を振り返り、思うところを書いてみました。
数年後はこのBLOGでこれをやってみたいと思います。
それでは</description>
    </item>
    
    <item>
      <title>自己責任についての 個人的な考え</title>
      <link>https://3panda.github.io/posts/20181113/</link>
      <pubDate>Tue, 13 Nov 2018 07:06:21 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20181113/</guid>
      <description>大人になれば自由になる
自由は責任を伴う
少し前のはなし
自己責任論がどうとかって話題なってたけど、なんだかよく分からないのが本音
なぜかと言えば、そんな事は小学校で習った気がするから
わざわざ危険なところに出向いて危険な目に合う
命の保証の無い仕事を自分の責任で選んでいる
その事はたしかに自己責任
しかし、それと活動自体を否定するのは別の問題
世界の情勢を危険を犯してでも伝えようとする仕事を否定する
その権利は誰にあるんだろう
それと、国がお金を出したどうこうの件は、あくまで国の判断、国の責任
そしてその政権与党を政府にしたのは我々国民の責任
これもまた自己責任
私は今年、図らずもフリーランスになりました
なったきっかけは 図らずも ではあります
ですが、やりたい仕事をやるために選択しました
フリーランスは色々と自由です
でも
フリーランスは色々と不安定です
そんな自己責任がついて回ります
生きていたら誰だって自ら考え、自の選択し、自分で行動する事になります
結局、人は自己責任で生きている
自己責任って言葉がなんなのか自分なりに考え
毎度の事ながら、まとまりのない文章を今回の記事にしてみました
この記事が「意味不明だ！」と非難されるかもしれません
それもまた私の自己責任
それでは</description>
    </item>
    
    <item>
      <title>TypeScriptなのかBabelなのか、なんかそんなはなし</title>
      <link>https://3panda.github.io/posts/20181001/</link>
      <pubDate>Mon, 01 Oct 2018 22:58:56 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20181001/</guid>
      <description>二、三年振りにWebのフロントのお仕事をするようになって、新規のアプリケーション開発に限ればですが、ReactやVueと行ったライブラリを使うのが標準と個人的には思っています。
そしてお仕事で請け負う場合に条件として挙げられる事が多いのは
React(又はVue) + TypeScript
ライブラリー(React or Vue)と一緒にTypeScriptの利用です。
TypeScriptが選ばれる理由 理由としては大きくはこの二点
 古いJavaScriptへの対応(古いブラウザへの対応) 静的型付けで開発出来る  古いJavaScriptへの対応(古いブラウザへの対応) まずは単純にES6に対応していないブラウザを対象にする場合 なんらかの方法でES5に書き換える必要があるためです。
この解決方法には現在はTypeScriptかBabelを選択するケースが多いかと考えます。
昔は色々ありましたが割愛します。
気になる人はAltJSとかでググってください。
BabelとTypeScriptの違い  Babelはトランスパイラ TypeScriptはAltJS  Babelはトランスパイラです。
簡単に言うと新しい文法を使ったソースコードを古い文法のコードに書き換えてくれるも変換ツールです。
TypeScriptとはAltJSです。
AltJSはその名の通りJavaScriptの代替言語でコンパイルするとJavaScriptに書き出されます。設定で古いJavaScriptにする事が出来ます。もちろんES6にも
静的型付けで開発出来る TypeScriptは静的型付けの言語です。
静的型付け、つまりは変数や関数の引数や戻り値に型を指定する事が出来る。
他の静的型付け言語の使用感に近い状態で開発が出来ると言われています。
JavaScriptで静的型付けは個人的には違和感があった ただ私は静的型付けへの拘りには違和感がありました。
私は元々がWebのフロントで、直近で三年くらいUnityを触っていたのでC#を書いていました。
ですので、動的型付けであるJavaScriptも静的型付け(C#で)も経験しています。
元々動的型付けに慣れている身としては、TypeScriptで静的型付けをする意味が理解出来ませんでした。
「型の無い言語なんて触りたくない」
への（型が無いのではなく動的だ!）反発もあり
 動的型付けである事を想定して開発すれば良いのでは？ Babelを使ってES6の記述で開発する方が良いのでは？  そんな思いが強くありました。
もちろんTypeScriptは優れた言語だと思います。
だたJavaScriptに慣れていないエンジニアのために、静的型付けでの開発が慣れていると言う理由だけで利用するのにはどうも違和感があったのです。
静的型付けで開発する必要性や事情が見えてきた しかし、いろいろな人と話して少し考え方が変わりました。
大きなWebシステムでの開発事例を聞いたり、私自身も関わって行く中でJavaScriptにはかなり重大な危険性がある事を再認識したからです。
JavaScriptの重大な危険性 JavaScriptをはじめとしたWebのフロントエンド技術の最大の利点は
__簡単に開発が出来る事__です。
これは__言語の難易度とかそう言う事では無くて、実行環境__だったりそんな話です。
昨今はWebpackなどのモジュールバンドラの利用が必須ですが、それでも他の言語に比べて__開発環境を用意しやすく、開発が簡単に始められる__かと思います。
ただ、その簡単さが重大な危険性 である事を再認識しました。
 簡単が故に乱れやすく、崩れやすい 崩れやすいが故にトラブルを起こしやすい  ルールの厳守は難しい これらを防止するために、__厳格なルールを設けて厳守する__と言う手立てもあります。 ただ開発メンバー全員がよほど 強い意志 で臨まない限り、__ルールを守るのは困難__です。
何故なら__ルールを破っても開発は可能__※だからです。
そんな状態で例えば納期が迫っていたら、
 エラーにならなければ、今は大丈夫 とにかく動いていれば、今は大丈夫  ect、</description>
    </item>
    
    <item>
      <title>仕事は結果、人付き合いは過程</title>
      <link>https://3panda.github.io/posts/20180927/</link>
      <pubDate>Thu, 27 Sep 2018 07:12:47 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20180927/</guid>
      <description>仕事は結果を出さないといけないものだと個人的には思います。
ここで言う結果とは、のちに繋がるものがあればそれも含みます。
では、人間関係はどうでしょう？
私は人間関係は過程が大事だと思います。
何かをしてくれようとした時、それが結果に結びつか無い事は多々有ります。
そして結果が伴わないとそれを攻め立てる人もいます。
嘘つき、約束を破った　etc
結果が伴わなかった事は残念な事実です。
しかし悪意を持っての結果では無く、全力を尽くしての結果であれば、
その過程は認めるべきだと思います。
そうでなければ、
「誰かのために動こう」
なんて思う気持ちは人から無くなり、合理性だけを求めた残念な世界
優しさの無い世の中 になっていくように思います。
そんな世の中は 生き辛い ので、過程を大事 に生きて生きたい
そう思います。
それでは</description>
    </item>
    
    <item>
      <title>リモートワークが出来ない理由とか色々と</title>
      <link>https://3panda.github.io/posts/20180914/</link>
      <pubDate>Fri, 14 Sep 2018 06:00:24 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20180914/</guid>
      <description>リモートワークについてなんとなく考えて事を書いてみます。
※以下はリモートワークがそもそも不可能な業種について含まない前提の話になります。
企業がリモートワークを認められない最大の問題 企業がリモートでの業務に踏み込めないのにはいくつかの理由があると思います。
 セキュリティ対策 勤怠管理 コミュニケーション  大きくはこの三つなのかと個人的には思います。
もちろん、それぞれの企業で事業内容だったりに違いがあるのでこの限りでは無いと言う前提で。
上二つの __セキュリティ対策__と 勤怠管理 は手間とお金をかければ解決するので、リモートワークがその__手間やお金をかけるに値する価値__があるかを考えれば良いように思います。
一番厄介な問題は コミュニケーション不足の不安 なのかと思います。
厄介ではありますが、今はビデオチャットなども使いやすくなっているので、個人的には努力次第なのかと思います。
オフラインで顔をあわせるには多少は劣るでしょうが、慣れれば基本的には問題無いと言うのが私の見解です。
ただ厄介なのはこれは働く人自身の問題になってくるので、手間やお金だけではすぐに解決しないところです。
リモートワーク以前の根本的な問題 コミュニケーションの問題といえば、同じ事務所内にいても チャットでしか会話をしない なんて言うリモートワーク以前の問題を抱える企業も多くあります。
__同じ場所にいて会話が出来ない状態__では確かに__リモートワークは不可能__です。
そもそもの コミュニケーションのあり方の問題 なので__リモートワーク以前の問題__ですが
実際にはこれを抱えている企業は多いのでは無いかと思います。
そして残念な事に、__すぐに実害が無い場合が多く、問題視されずに放置__されている企業が多いように感じます。
個人的に思う理想的なリモートワーク 私の数少ない経験上の理想ですが
 リモートでも一日一度は顔を見て話す リモートで週一度、雑談込みで振り返りをする 定期的に実際にあって話をする  上記が理想的なリモートワークのワークフローはこちらになります。
個人的な結論 決局のところ リモートワークは場所を選ばない働き方の手段 である事を第一に考えればある程度の努力で問題は解決すると思っています。
そしてリモートワークは 仕事を依頼する側が働き手を信じる事、働く側は責任ある働き方をする事 が大前提の働き方であると私は考えます。__信頼関係と責任ある行動__それが無い状態では成り立ちません。
しかし、それを成り立たせる事が出来れば、リモートワークは 仕事をしたくても出来ない人 と 企業の人で不足 その両方を解決する最善の働き方の一つになると思います。
それでは</description>
    </item>
    
    <item>
      <title>通勤電車に久々に乗って思ったこと</title>
      <link>https://3panda.github.io/posts/20180911/</link>
      <pubDate>Tue, 11 Sep 2018 07:22:16 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20180911/</guid>
      <description>先月から久しぶりに通勤電車に乗っているのですが、やはり疲れますね。
そして通勤していると
 とにかく急いでいる人 とにかくイライラしている人 とにかく疲れている人  をよく見かけます。
「何をそんなに急いているんだろう?」
「そんなにイライラして会社に行って何ができるんだろう?」
「そんなに疲れて仕事はできるんだろうか？」
と思ってしまいます。
おそらく少し前までは自分もそんな感じの勤め人だったと思います。
幸いな事に今のお仕事は自宅でも出来るので常に通勤する必要はありません。
通勤するとしても、朝決まった時間に会社に到着 という制約は無いので
以前よりは負担は少ないです。
ふと思うのですが、私が見かけた人、全員が 朝から会社に行かないと仕事ができない のでしょうか？
もちろん世の中には、
会社に行かないと不可能なお仕事 は世の中には沢山あるので__全ての仕事がそうでは無い__ とは思います。
ですが 会社に行かなくても可能な仕事 を昔ながらのやり方で行い続けるのは本当に限界が来ているように思います。
また、会社に行くにしても、全員が決まった時間に同じ場所に集まり働く事 が、その仕事を行う上で最善 なのかは本当に考えないといけないと改めて思いました。
そこを考える事で
 人材不足 働きたいが働けない  この__矛盾する二つの重要な課題__の解決に一歩前進すると思います。
それでは</description>
    </item>
    
    <item>
      <title>他者を見下す様な発言をする人の実際は（あくまで個人的な見解)</title>
      <link>https://3panda.github.io/posts/20180822/</link>
      <pubDate>Wed, 22 Aug 2018 06:57:30 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20180822/</guid>
      <description>自分自身も油断すると陥りそうなので戒めに書いておきます。
他者を見下す様な発言をする人の実際はこんな場合が多いのかと思います。
 その人自身が何らかの差別的な行為を受けストレスを感じている(実際は違っていてもそう感じている) 自分自身に自信が持てなくなり、他者を見下し自身を肯定する事で安定を保っている  最近、これだって具体例があったので書こうと思ったんですが、ちょっと炎上しても嫌なのでやめておきます。
何と言うか もう他人を気にして生きるの止めようよ！ って日々思います。
それでは</description>
    </item>
    
    <item>
      <title>個人的なアウトプットのゆるいルール</title>
      <link>https://3panda.github.io/posts/20180821/</link>
      <pubDate>Tue, 21 Aug 2018 09:51:47 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20180821/</guid>
      <description>ルールと書くと大げさですが、自分のアウトプットのやり方を自己分析してみました。
アウトプットの種類 現在の自分のアウトプットの種類です。
 思った事とか考え 技術的なメモとか記録 作ったものコード  アウトプットの先 種類の対してアウトプット先
 BLOG(ここ) Gist GitHub  BLOG(ここ) BLOGは現在進行形でご覧いただいている、こちらになります。
主に思った事とか考えを書き出す場にしています。
何かのテーマで色々と考えるのに私はSNSで一人ブレストをするのですが、
それがある程度、纏まったら、それをさらに整理して、記録する場がこちらになります。
GIST Gistは技術的なメモがメインです。
技術的なメモ
と書くとなんかすごくカッコイイのですが、本当のところは自分用の忘備録です。
また、以前はBLOGの代わりもしていました。
GitHub GitHubは実際に作ったコードを載せています。 アプリケーションやサービスと言えるほどの大したもの載せておりませんが、 設定をすれば動くものが管理されています。(そうじゃ無いものもあります&amp;hellip;)
概ね解説はREADMEに記載しているのですが、説明が不足している場合はGISTの方で解説を載せる場合もあります。
最近は主に仕事で使いそうな技術の検証がメインになっています。 その関係で現在(2018/08時点で)はPythonが多いです。
Pythonは実際には書き出して一年くらいですが&amp;hellip;.
終わり 個人的なアウトプットのゆるいをご紹介しました。
皆さんもどうぞご参考に&amp;hellip;.なんて上から目線で言える程の内容でも無いのですが
「そんな風にやってるんだ」
くらいに覗いて頂ければ幸いです。
それでは</description>
    </item>
    
    <item>
      <title>マークアップの事とかマークアップエンジニア(コーダー)でご飯が食べれるのかとかそんな話</title>
      <link>https://3panda.github.io/posts/20180820/</link>
      <pubDate>Mon, 20 Aug 2018 09:43:20 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20180820/</guid>
      <description>誰に読んで欲しい  これからWeb業界に入ろうとする人 現在スクールで勉強している人  何様が語るのか 私は元々はWebデザイナーのアシスタントの様な事から始まり、Web標準の時代になって分業が進んだ時代にマークアップエンジニアとしてHTMLとCSSを専門にお仕事をしていました。
その後、Web2.0とかAjaxとかの時代でjQueryも触る様になって、ちょっとした動きをつけたり組んでいました。
個人的にはjQueryよりも生のJavaScriptを触るのが好きで、可能な限りはjQueryは避けていましたがスケジュールの都合とかでjQueryを使わざる得ない事も多かったです。
その後に色々と経て、モバイルゲームエンジニアになりC#(Unityに限定だけど)を書く様になって、本格的なプログラミングをする様になりました。
マークアップエンジニアについて改めて HTMLの正式な名称がHyperText Markup Language（ハイパーテキスト マークアップ ランゲージ)である事からHTMLを組む事（付随してCSSでデザインも定義する事）をマークアップと言い、それを行う人をマークアップエンジニアと呼ぶ事があります。
コーダーと言う呼び名が昔からありますが、これはTableレイアウトの時代にデザインをただWebブラウザ再現するで個人的にはあまり好きではありません。
また
「HTMLとCSSを書いているだけでエンジニアと名乗るな！」
などと言われている人もおりますが エンジニアとは技術者の事を指す言葉 である為、何も間違ってはいないと思います。
__エンジニアとはプログラミングをする人の事を指す言葉__と思われているなら、その方は少し知見が無さすぎでは無いでしょうか。
まぁ、そんな人は無視しておきましょう。
マークアップエンジニア(コーダー)でご飯を食べれるのか 正直なところ、現在(2018年)では中々厳しいと思います
かなり昔、15年程前であれば大小限らずどこの企業さんもWebサイトを作ろうとしていました。
またTVCMや紙媒体よりも費用が安くすむ事で需要が高まっていた時代でもありました。
そんな時代であれば、いくらでもお仕事はあったと思います。（危険な事も多かっただろうけど）
ただ現在はWebサイト制作の需要も下がっているのが現実です。 そんな今でもマークアップだけのお仕事はあるにはあるでしょうが、制作会社などの正社員になるには、それだけでは厳しいかもしれません。 ましてや、__未経験でフリーランスや副業__と言うのも現実的ではありません。
なので、現在勉強中の方やこれからWeb業界を目指す人は
 「HTML/CSSとjQueryが出来れば就職出来ます！！」 「フリーランスでもお仕事がいっぱいあります！！」  なんて甘い言葉は鵜呑みにせず、地道に下済みからWebの経験を積んでいただきたいと思います。
ただ、先程は正社員の道は厳しいと書きましたが、学生さんであればインターンで経験を積んでからの採用はあるでしょうし、学生さんで無くてもポテンシャル採用で募集をかけている企業もあります。
後者の場合、中途でももちろんお給料は期待できませんが育てる事を前提にしているのでやる気を見て採用してもられる可能性はあります。
それでもマークアップは重要 マークアップだけではお仕事をするのは難しいと先程は書かせて頂きました。
じゃ、マークアップなんて真面目にやる必要が無い　なんて思ってしまうかもしれません。
もし、あなたの目指すべきところが以下のいずれかだとしましょう
 JavaScriptなどを扱うフロントエンドエンジニア デザインをメインでおこうなうWebデザイナ サーバーサイドのエンジニア  上記のどれを選んでも実際のところHTMLとCSSの深い理解と知識は必要になります。
現在のHTMLとCSSは主要なブラウザのシェア争うも落ち着いていますし、それぞれの仕様や表示の誤差も落ち着いているため、単にマークアップを行い表示させるだけであれば、簡単な事かもしれません。
しかし
 メンテナンス性 汎用性  を考えた__設計力__はこれまで必要で、それが考えられていないと、運用する場合に誰かが痛い目に合う事になる。 その場凌ぎの適当なマークアップはトラブルの温床で誰も幸せにはしません。
マークアップエンジニアでも無いのになぜ？ と思うかもしれません。
確かにマークアップを担当するマークアップエンジニアが常駐していればあまり意識する必要は無いのかもしれません。
しかし先程、述べた様に、マークアップエンジニアはお仕事としてはやっていくのは難しくなってきました。
その反面、これまで以上に他の職種の人にマークアップのスキルが求められる場面が増えて行きます。
余談 少し前から久しぶりにWebのお仕事をする様になって、たの方のコードを見る機会があったのですが、残念な事にマークアップが杜撰なソースコードを多く見つけました。
諸々に事情はあるのでしょうが、マークアップが相変わらず軽視されている現実に少し悲しくなりました。
マークアップエンジニア(コーダー)に必要なプラスα 先ほども書いた通り、ブラウザの誤差などが落ち着いた事もあり、現在はマークアップだけを専門に行うマークアップエンジニア(コーダー)でやって行くのは厳しいかもしれません。
おそらく現在、__マークアップエンジニア__を名乗られている方は プラスα をお持ちなのだと思います。</description>
    </item>
    
    <item>
      <title>技術系フォーラムで学んだ事を思い出して思った事などダラダラと</title>
      <link>https://3panda.github.io/posts/20180817/</link>
      <pubDate>Fri, 17 Aug 2018 11:08:47 +0900</pubDate>
      
      <guid>https://3panda.github.io/posts/20180817/</guid>
      <description>ここ最近、とある技術系のフォーラムを眺めていて思った事を今日は書いてみたいと思います。
尚、極私的な内容であるためその点はご理解くださいませ。
技術系フォーラムとの出会い 私がWebを始めた頃、Flashが全盛期でインタラクティブなWebサイトが注目を浴びている時代でした。
多分に漏れず私も挑戦したわけですが、そこに立ちはだかったのはActionScriptでした。
ActionScriptを知らない若い方は、ググってもらったら良いと思います。
あぁ、そんな時代なのね（歳がばれる&amp;hellip;）
そんな私が分からないActionScriptを理解するために頼ったのが「FLASH-jpフォーラム」と言う日本最大級のFlashメーリングリストから生まれたWebフォーラムでした。
当時、2ちゃんねるのスレで質問するって選択肢があったのですが、ちょっと怖かったので眺めるだけで投稿はFLASH-jpの方で行なっていました。
そして、そこで私は手厳しい洗礼を受ける事になります。
技術系フォーラムでの洗礼 まず何も知らない私は、
「こんな事をしたいがやり方が分かりません。教えてください」
のような事を投稿していました。
そうすると
 (自分の)作業の環境 (あれば）実際に書いたコード 何が出来ているのか（分かっているのか） 何が出来ていないのか(分かっていないのか) (コードを書いていたら)エラーがあればその内容  「まずはそれを書きなさい」
とモデラー（回答してくれる方）にお叱りを受けます。
お叱りと言ってもかなり優しい言い回しです。
とは言え、私はちょっと怖いなって思ってしまいました。
「何が分からないか分からないから聞いているのに」と
思いながらフォーラムに上記の内容を書き足しました。
その後、その情報を元に数人の方のアドバイスで問題の解決に辿りつく事が出来ました。
フォーラムの目的は質問者の問題を解決するだけでは無い
同じ問題で困った人が解決するヒントを残す事でもある
このスレッドがあなたと同じ問題に陥った人を助けるヒントになります
自分の問題が解決した後にモデラーの方に頂いたコメントです。
実際にこの事に意味が分かるようになるまでに私は時間が掛かりました。
現在の解決方法 現在の私は何か技術的な問題に直面した時、以下のような方法を取るようにしています。
 上記のフォーラムで質問する時に書く内容を整理 その技術のキーワードでググる(技術系のBLOGが良くヒットする) その技術のフォーラムの中を検索 GitHubを検索 その技術のフォーラムで質問  フォーラムでの質問は本当の最後の手段になります。
大抵の場合はその前の段階で解決する事が多いです。
即ち、誰かの 過去の記録がヒント になっている事が多いということになります。
そう考えると 自分の大した事の無い躓き も誰かの役に立っているのでは無いかと思い
今でもフォーラムへの書き込みは詳細に情報を書きますし、調べて分かった事はBLOGやGist、コードもなるべくGitHubに公開するように心がけています。
そうです、本当に最近になってフォーラムで言ってもらった言葉に意味を理解しました
私が技術系フォーラムで学んだ事 その当時は理解しきれていませんでしたが、私が学んだ事は以下になります。
 課題に直面した時は現状を冷静に分析する事 誰かに助けを求める時はその内容を伝える事 解決した時は解決までの経緯を可能な限り公開する事（守秘義務とかその辺りは当然配慮して）  これはWebでもゲーム開発でもプログラムでもデザインでもその他のありとあらゆる事に通じる事だと思います。
 自己分析する事 自分の状況を伝える事（伝わるように努力する事） 自分の経験で同じように躓いた人を助ける事（助けになるように務める事）  最近、気のせいだったら良いのですが、企業で仕事をしていてもWebのフォーラムを見ていてもそうした事がおざなりになっていると感じる事があります。
会社の話で言うならば、実際に同じ場所にいて話す事が無くても、これらの事が出来て入れば 常に会社に来て仕事する必要なんて無い のかもしれません、逆に言えば これが出来なければ同じ場所に集まっていても意味が無く __ 一人では出来ない事を成す事 は難しいのかと思います。</description>
    </item>
    
  </channel>
</rss>